import requests, re, pyasn
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
from charts.chart import Chart
import math, time
import numpy as np
from numpy.polynomial.polynomial import polyfit
asndb = pyasn.pyasn('ipasn_db')
class ASNScatterChart(Chart):
    country_gdp = {'AR': 20677, 'AT': 49247, 'AU': 49882, 'BD': 4561, 'BE': 46301, 'BG': 21578, 'BR': 15500, 'BY': 18616, 'CA': 48141, 'CH': 61360, 'CL': 24588, 'CN': 16624, 'CO': 14455, 'CR': 17149, 'CZ': 35223, 'DE': 50206, 'DK': 49613, 'EE': 31473, 'EG': 12994, 'ES': 38171, 'FI': 44050, 'FR': 43550, 'GB': 43620, 'GR': 27776, 'HK': 61016, 'HU': 28910, 'ID': 12378, 'IE': 72632, 'IL': 36250, 'IN': 7174, 'IS': 52150, 'IT': 37970, 'JP': 42659, 'KG': 3652, 'KZ': 26071, 'LT': 31935, 'LU': 109192, 'LV': 27291, 'MX': 19480, 'MY': 28871, 'NL': 53582, 'PA': 24262, 'PL': 29251, 'PT': 30258, 'RO': 23991, 'SE': 51264, 'SG': 90531, 'SI': 34063, 'SK': 32895, 'TH': 17786, 'TR': 26453, 'TW': 49827, 'UA': 8656, 'US': 59495, 'VN': 6876}
    def asn_size(self, asn):
        return sum([2**(32-int(x.split('/')[-1])) for x in asndb.get_as_prefixes(int(asn))])

    def asn_country(self, asn):
        d = 'https://www.ultratools.com/tools/asnInfoResult?domainName=AS%s' % asn
        d = requests.get(d)
        soup = BeautifulSoup(d.text, 'html.parser')
        return soup.find_all('span', {"class": "value"})[0].text

    def show(self, data, show=True):
        print('ASN Scatter')

        asns = [x[-6] for x in data if x[-6] != '-' and x[-6] != '' and asndb.get_as_prefixes(x[-6])]
        results = {asn:asns.count(asn) for asn in asns}

        tmp = {}
        for k in results:
            country = self.asn_country(k)
            if country not in self.country_gdp:
                continue
            if (country not in tmp):
                tmp[country] = (0,0)
            tmp[country] = (tmp[country][0]+results[k], tmp[country][1]+self.asn_size(k))
        results = {k : tmp[k][0]*100.0/tmp[k][1] for k in tmp}
        results = {k : results[k] for k in results if results[k] < 0.1}
        results = {k: results[k] for k in sorted(results.keys(), key=lambda x: results[x])}
        ys = np.array([x for x in results.values()])
        xs = np.array([self.country_gdp[x] for x in results.keys()])
        b, m = polyfit(xs,ys,1)
        print(xs)
        print(ys)
        from scipy.stats import linregress
        print("hier")
        print(linregress(xs,ys)) #x and y are arrays or lists.

        plt.plot(xs, ys, '.')
        plt.plot(xs, b+m*xs, '-')
        plt.xlabel('GDP Per Capita times $1000 USD')
        plt.ylabel('% of malware domain incidents')
        plt.title('% of incidents by country GDP per capita')
        plt.xticks(np.arange(0, max(xs), 10000), np.arange(0, max(xs)/1000, 10))
        if show:
            plt.show()
        else:
            plt.savefig('charts/results/asn_per_gdp_scatter.png')
        plt.close()
